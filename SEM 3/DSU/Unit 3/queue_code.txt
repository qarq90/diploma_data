#include<stdio.h>
#include<stdlib.h>

#define size=10;
int q_array[10];
int front = -1;
int rear = -1;

void popQueueArray(){
    if(front == -1){
        printf("\n\t Queue Underflow!!!");
    }
    else{
        printf("\n\t Element %d - Popped from queue\n",q_array[front]);
        front = front + 1;
    }
}

void pushQueueArray(){
    int queueData;
    if(rear == 10 - 1){
        printf("\n\t Queue Overflow!!!");
    }
    else{
        if(front == -1){
            front = 0;
            printf("\n\t Enter data to be pushed:");
            scanf("%d",&queueData);
            rear = rear + 1;
            q_array[rear] = queueData;
            printf("\n\t Data pushed!!!");
        }
    }
}

void displayQueueArray(){
    if(front == -1){
        printf("\n\t Queue is Empty!!!\n");
    }
    else{
        printf("\n\t");
        printf("\n\t Queue is:");
        for(int i = front; i <= rear ; i++){
            printf("<----%d",q_array[i]);
        }
        printf("\n");
    }
}

void queueArray(){
    int choice;

        printf("\n\tFollowing operations on queue can occur according to their respective number:\n");

    while(1){
        printf("\n\t 1 - Popping from the queue");
        printf("\n\t 2 - Pushing in to the queue");
        printf("\n\t 3 - Display the created queue");
        printf("\n\t 4 - Exit");

        printf("\n\n\t Enter your choice:");

        scanf("%d",&choice);

        switch(choice){
            case 1:
                popQueueArray();
                break;
            case 2:
                pushQueueArray();
                break;
            case 3:
                displayQueueArray();
                break;
            case 4:
                exit(0);
            default :
                printf("\n\t Invalid Choice!!!\n");
        }
    }
}

int main(){
    queueArray();
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node{
   int info;
   struct node *ptr;
}*front,*rear,*temp,*front1;
int frontelement();
void enq(int data);
void deq();
void display();
void create();
int count = 0;
void main(){
   int no, ch, e;
   printf("
 1 - Enqueue");
   printf("
 2 - Dequeue");
   printf("
 3 - Display");
   printf("
 4 - Exit");
   printf("
 5-front");
   create();
   while (1){
      printf("
 Enter choice : ");
      scanf("%d", &ch);
      switch (ch){
         case 1:
            printf("Enter data : ");
         scanf("%d", &no);
         enq(no);
         break;
         case 2:
            deq();
         break;
         case 3:
            display();
         break;
         case 4:
            exit(0);
         break;
         case 5:
            e = frontelement();
         if (e != 0)
            printf("Front element : %d", e);
         else
            printf("
 No front element in Queue");
         break;
         default:
         printf("Wrong choice, Try again ");
         break;
      }
   }
}
void enq(int data){
   if (rear == NULL){
      rear = (struct node *)malloc(1*sizeof(struct node));
      rear->ptr = NULL;
      rear->info = data;
      front = rear;
   }else{
      temp=(struct node *)malloc(1*sizeof(struct node));
      rear->ptr = temp;
      temp->info = data;
      temp->ptr = NULL;
      rear = temp;
   }
   count++;
}
void display(){
   front1 = front;
   if ((front1 == NULL) && (rear == NULL)){
      printf("Queue is empty");
      return;
   }
   while (front1 != rear){
      printf("%d ", front1->info);
      front1 = front1->ptr;
   }
   if (front1 == rear)
      printf("%d", front1->info);
   }
   void deq(){
      front1 = front;
      if (front1 == NULL){
         printf("
 Error");
         return;
      }
      else
      if (front1->ptr != NULL){
         front1 = front1->ptr;
         printf("
 Dequeued value : %d", front->info);
         free(front);
         front = front1;
      }else{
         printf("
 Dequeued value : %d", front->info);
         free(front);
         front = NULL;
      rear = NULL;
   }
   count--;
}
int frontelement(){
   if ((front != NULL) && (rear != NULL))
      return(front->info);
   else
      return 0;
}
